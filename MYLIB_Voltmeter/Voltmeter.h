/**
	Voltmeter_h - библиотека, позволяющая представить отдельный аналоговый пин, как вольтметр с делителем.
	Имеется внутренний фильтр значений с усреднением, позволяющий получить точный усреднённый результат даже тогда, когда производится измерение нестабильного
	источника напряжения с пульсациями.
	При создании указывается:
		* Пин, на котором будет висеть вольтметр.
		* Необязательный параметр - опорное напряжение АЦП
		* Необязательный параметр - сопротивление верхнего резистора делителя
		* Необязательный параметр - сопротивление нижнего резистора делителя
		* Необязательный параметр - количество выборок для усреднения значения

	Если при создании указать только пин, вольтметр будет измерять текущее фактическое напряжение на указанном выводе, используя в качестве опорного напряжения 5 вольт.
	Если дополнительно указать и опорное напряжение, то результат будет рассчитываться исходя из него.
	Для проведения измерений напряжения большего, чем опорное, необходимо сделать резистивный делитель, а в конструкторе вводятся параметры верхнего и нижнего резистора.
	Можно дополнительно изменить количество выборок. Если необходимо отключить фильтрацию - укажите 1.
	Также, изменение количества выборок возможно методом setFilterSamplesCount(int countOfSamples). 
	В качестве опорного напряжения лучше устанавливать внутреннее напряжение контроллера, так как оно более стабильно.
	Для того, чтобы узнать верхнюю границу вольтметра с определёнными параметрами, используйте эту формулу:
	|-------------------------------|
	|	REF / (R2 / ( R1 + R2 ) )	|
	|-------------------------------|
	Где REF - опорное напряжение, а R1 и R2 - параметры верхнего и нижнего резисторов делителя соответственно.
	Для проведения очередного измерения и учёта его результата в усреднённом напряжении, в цикле/таймере/отдельном потоке вызывается метод processMeasurement()
	Для того, чтобы узнать текущий уровень напряжения на этом выводе, вызывается метод getVoltage().
	Написано за один вечер. ExtNeon. 05.11.2017
*/

// проверка, что библиотека еще не подключена
#ifndef Voltmeter_h // если библиотека не подключена
#define Voltmeter_h // тогда подключаем ее

#include "Arduino.h"

class Voltmeter {
	public:
		Voltmeter(byte measurement_Pin, float ctrl_ref_voltage = 5., float rdiv_TopResistance = 0, float rdiv_BottomResistance = 1, int filterCountOfSamples = 6);
		void setDividerParams(float rdiv_TopResistance, float rdiv_BottomResistance, float ctrl_ref_voltage);
		void setFilterSamplesCount(int countOfSamples = 6);
		float getVoltage();
		void processMeasurement();
	private:
		byte _pin;
		//short *dev_vlmSumValue;
		int dev_maxFilterSamplesCount; //Максимальное количество сложений для усреднения
		unsigned long dev_measuresSum = 0;
		int dev_countOfMeasures = 0;
		short dev_sum = 0;
		double dev_transferCoeff;
		boolean dev_changed = true;
		float dev_lastResult;
};

#endif